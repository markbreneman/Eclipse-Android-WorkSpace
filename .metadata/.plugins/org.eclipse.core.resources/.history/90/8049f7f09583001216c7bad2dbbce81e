package com.example.NatureCalling;

//import android.R;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import com.jwetherell.motion_detection.MotionDetectionActivity.DetectionThread;
import com.jwetherell.motion_detection.MotionDetectionActivity.SavePhotoTask;
import com.jwetherell.motion_detection.data.GlobalData;
import com.jwetherell.motion_detection.data.Preferences;
import com.jwetherell.motion_detection.detection.AggregateLumaMotionDetection;
import com.jwetherell.motion_detection.detection.LumaMotionDetection;
import com.jwetherell.motion_detection.detection.RgbMotionDetection;
import com.jwetherell.motion_detection.image.ImageProcessing;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.hardware.Camera;
import android.hardware.Camera.PreviewCallback;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore.Images.Media;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity implements OnClickListener, SurfaceHolder.Callback, Camera.PictureCallback{
	
	private static final String TAG = "MotionDetectionActivity";
	
	SurfaceView cameraView;
	SurfaceHolder surfaceHolder;
	Camera camera;
	boolean inPreview = false;
	
	Button startButton;
	TextView countdownTextView;
	
	Handler timerUpdateHandler;
	boolean timerRunning = false;
	int currentTime = 10;
	public static final int configuration= 0;
	
	//When the App Starts
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
	
	    cameraView = (SurfaceView) this.findViewById(R.id.CameraView);
		surfaceHolder = cameraView.getHolder();
		surfaceHolder.addCallback(this);
		surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		
		//OPEN UP PREFERENCE AND DETERMINE WHICH DETECTOR TYPE TO USE
//		if (Preferences.USE_RGB) 
//	            detector = new RgbMotionDetection();
//	        } else if (Preferences.USE_LUMA) {
//	            detector = new LumaMotionDetection();
//	        } else {
//	            // Using State based (aggregate map)
//	            detector = new AggregateLumaMotionDetection();
//	        }
		
		
		
		//Setup Countdown Text
		countdownTextView = (TextView) findViewById(R.id.CountDownTextView);
		//Setup StartButton
		startButton = (Button) findViewById(R.id.CountDownButton);
		startButton.setOnClickListener(this);
		//Setup Handler for Timer
		timerUpdateHandler = new Handler();
	}
	
	//Declare function for what happens on Configuration changes ex. screen rotation.
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
	}
	
	//When user leaves this specific activity;
	@Override
	public void onPause() {
        super.onPause();

        camera.setPreviewCallback(null);
        if (inPreview) camera.stopPreview();
        inPreview = false;
        camera.release();
        camera = null;
        
      //Update the gallery - mb;
        this.sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED, Uri.parse("file://"+ Environment.getExternalStorageDirectory())));
	}
	
	//After the app is launched and where it starts 
	//when coming back from paused
	@Override
	public void onResume() {
	    super.onResume();
	    camera = Camera.open();
	}

	//Getting the best size for the preview window
	private static Camera.Size getBestPreviewSize(int width, int height, Camera.Parameters parameters) {
        Camera.Size result = null;
        //For the Phone's camera Params get the supported preview sizes
        //iterate throught sizes to get largest supported 
        for (Camera.Size size : parameters.getSupportedPreviewSizes()) {
            if (size.width <= width && size.height <= height) {
                if (result == null) {
                    result = size;
                } else {
                    int resultArea = result.width * result.height;
                    int newArea = size.width * size.height;

                    if (newArea > resultArea) result = size;
                }
            }
        }

        return result;
    }
	
	//Callback interface used to deliver copies of preview frames 
	//as they are displayed.
	private PreviewCallback previewCallback = new PreviewCallback() {

	    @Override
	    public void onPreviewFrame(byte[] data, Camera cam) {
	        if (data == null) return;
	        Camera.Size size = cam.getParameters().getPreviewSize();
	        if (size == null) return;
	        
	        //This is a check to make sure that the phone is not in motion
	        //it prevents the motion detector from capturing data while moving.
	        //If the phone is not in motion start a new detection 
	        if (!GlobalData.isPhoneInMotion()) {
	            DetectionThread thread = new DetectionThread(data, size.width, size.height);
	            thread.start();
	        }
	    }
	};

	//Callback interface to receive information about changes to 
	//the surface holder
	private SurfaceHolder.Callback surfaceCallback = new SurfaceHolder.Callback() {

       @Override
       public void surfaceCreated(SurfaceHolder holder) {
           try {
        	   //Set Camera to display in Surface holder
               camera.setPreviewDisplay(surfaceHolder);
               //Call preview callback
               camera.setPreviewCallback(previewCallback);
           } catch (Throwable t) {
               Log.e("PreviewDemo-surfaceCallback", "Exception in setPreviewDisplay()", t);
           }
       }

       @Override
       public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
           Camera.Parameters parameters = camera.getParameters();
           Camera.Size size = getBestPreviewSize(width, height, parameters);
           if (size != null) {
               parameters.setPreviewSize(size.width, size.height);
               Log.d(TAG, "Using width=" + size.width + " height=" + size.height);
           }
           camera.setParameters(parameters);
           camera.startPreview();
           inPreview = true;
       }

       @Override
       public void surfaceDestroyed(SurfaceHolder holder) {
       	///Nothing Needs to happen here.
       }
   };
   
   //Class for detection	
   private static final class DetectionThread extends Thread {

       private byte[] data;
       private int width;
       private int height;

       public DetectionThread(byte[] data, int width, int height) {
           this.data = data;
           this.width = width;
           this.height = height;
       }
       
       //START THE IMAGE PROCESSING ROUTINE
       @Override
       public void run() {
    	   
    	   //How does this work...Compare and set?  -Shawn
           if (!processing.compareAndSet(false, true)) return;

            Log.d(TAG, "BEGIN PROCESSING...");
            
           try {
               // Previous frame
               int[] pre = null;
               if (Preferences.SAVE_PREVIOUS) pre = detector.getPrevious();

               int[] img = null;
               //Convert the datat to RGB OR LUMA BASED OFF PREFERENCE.
               
               if (Preferences.USE_RGB) {
                   img = ImageProcessing.decodeYUV420SPtoRGB(data, width, height);
               } else {
                   img = ImageProcessing.decodeYUV420SPtoLuma(data, width, height);
               }
      
               int[] org = null;
               
               
               if (Preferences.SAVE_ORIGINAL && img != null) org = img.clone();
               //CLONE THE IMAGE & NAME IT ORG
               
               //IF THERE IS AN IMAGE AND DETECTION IS CALLED CHECK TIME BETWEEN
               if (img != null && detector.detect(img, width, height)) {
                   // The delay is necessary to avoid taking a picture while in
                   // the middle of taking another. This problem can causes some
                   // phones to reboot.
                   long now = System.currentTimeMillis();
                   if (now > (mReferenceTime + Preferences.PICTURE_DELAY)) {
                       mReferenceTime = now;//Last picture time.

                       Bitmap previous = null;
                       if (Preferences.SAVE_PREVIOUS && pre != null) {
                           if (Preferences.USE_RGB) previous = ImageProcessing.rgbToBitmap(pre, width, height);
                           else previous = ImageProcessing.lumaToGreyscale(pre, width, height);
                       }

                       Bitmap original = null;
                       if (Preferences.SAVE_ORIGINAL && org != null) {
                           if (Preferences.USE_RGB) original = ImageProcessing.rgbToBitmap(org, width, height);
                           else original = ImageProcessing.lumaToGreyscale(org, width, height);
                       }

                       Bitmap bitmap = null;
                       if (Preferences.SAVE_CHANGES && img != null) {
                           if (Preferences.USE_RGB) bitmap = ImageProcessing.rgbToBitmap(img, width, height);
                           else bitmap = ImageProcessing.lumaToGreyscale(img, width, height);
                       }

                       Log.i(TAG, "Saving.. previous=" + previous + " original=" + original + " bitmap=" + bitmap);
                       
                       //What is this LOOPER THING  -Shawn
                       Looper.prepare();
                       //CALL THE SAVE PHOTO FUNCTION
                       new SavePhotoTask().execute(previous, original, bitmap);
                       
                   } else {
                       Log.i(TAG, "Not taking picture because not enough time has passed since the creation of the Surface");
                   }
               }
           } catch (Exception e) {
               e.printStackTrace();
           } finally {
           processing.set(false);
           }
           Log.d(TAG, "ENDED PROCESSING...");
           processing.set(false);      
       }
   };	

   //HOW DOES THIS AsyncTask Work? - Shawn
 //How does do in backgroundwork? - Shawn
   private static final class SavePhotoTask extends AsyncTask<Bitmap, Integer, Integer> {
      
       @Override
       protected Integer doInBackground(Bitmap... data) {
           for (int i = 0; i < data.length; i++) {
               Bitmap bitmap = data[i];
               ///HERE IS WHERE YOU CAN CHANGE FILE NAME
               String name = String.valueOf(System.currentTimeMillis());
               if (bitmap != null) save(name, bitmap);
           }
           return 1;      
           
       }

       private void save(String name, Bitmap bitmap) {
           File photo = new File(Environment.getExternalStorageDirectory(), name + ".jpg");
           
           if (photo.exists()) photo.delete();
           
           try {
               FileOutputStream fos = new FileOutputStream(photo.getPath());
               bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
               fos.close();
               Log.v("Saving", "SavedPhoto");
               
           } catch (java.io.IOException e) {
               Log.e("PictureDemo", "Exception in photoCallback", e);
           }
       }
   }
	
	
	public void onClick(View v) {
		if(!timerRunning){
			timerRunning = true;
			timerUpdateHandler.post(timerUpdateTask);
		}
	}
	
	
	
	
	private Runnable timerUpdateTask = new Runnable(){
			public void run(){
				if(currentTime >1){
					currentTime--;
					timerUpdateHandler.postDelayed(timerUpdateTask, 1000);
					
//					Toast t = Toast.makeText(MainActivity.this, "Motion Detection will Start in "+Integer.toString(currentTime)+"secs", Toast.LENGTH_LONG);
//				    ToastExpander.showFor(t, currentTime*1000);
				}
				else{
					camera.takePicture(null,null, MainActivity.this);
					timerRunning = false;
					currentTime = 10;
				}
			countdownTextView.setText("Motion Detection will Start in"+currentTime);
			}
    };	
	
    

    
    
    

	public void onPictureTaken(byte[] data, Camera camera){
		Uri imageFileUri = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI, new ContentValues());
	try{
		OutputStream imageFileOS = getContentResolver().openOutputStream(imageFileUri);
		imageFileOS.write(data);
		imageFileOS.flush();
		imageFileOS.close();
	}catch (FileNotFoundException e){
		Toast FNF = Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT);
		FNF.show();
	}catch (IOException e){
		Toast IOE = Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT);
		IOE.show();
	}
	camera.startPreview();
	}

	
	//SWITCHING TO SETTINGS
	public void settingsClicked(View v){
		Log.v("SettingsClicked","SettingsClicked");	
		Intent i = new Intent(this,ConfigurationActivity.class);
//		i.putExtra(MainActivity.PASSING_DA, "Here is the data I am passing");
		startActivityForResult(i, configuration);	
	}

	
	
}

